-->     PENGENALAN FLEXBOX
Sebagaimana nama dari modul ini, kita akan membahas layout baru yang didefinisikan pada properti display, yaitu flexbox. Pada modul pendalaman CSS, kita telah mempelajari dua tipe elemen HTML atau dua mode layout: block dan inline. Tipe elemen block didesain untuk membuat layout dokumen karena tipe ini akan mengatur penataan secara vertikal (atas dan bawah) dan menambahkan baris baru. Sementara itu, tipe elemen inline didesain untuk membuat layout teks karena tipe ini mengatur penataan secara horizontal (kiri dan kanan).

Selain itu, dalam membuat layout, kita telah mempelajari properti float untuk membuat multiple column. Namun, penggunaan properti ini dirasa sulit dan tidak efektif untuk membuat website yang responsif.

Flexible Box Layout adalah model layout satu dimensi guna menyusun elemen-elemen (flex items) dalam posisi rows atau columns. Hal ini membuat flexbox disebut dengan direction-agnostic. Hal menarik dari flexbox adalah ia menawarkan penyusunan layout dengan fleksibel karena flex container mengatur dimensi setiap flex-items (child element) sehingga layout yang diinginkan dapat tercapai dengan mudah. Flex container memperluas flex items untuk mengisi ruang kosong atau menciutkannya sehingga menghindari overflow (dimensi child element yang keluar dari parent element-nya). Dengan hadirnya flexbox, perancangan layout dalam skala yang kecil dapat dilakukan dengan mudah dalam halaman web.

-->     ALASAN FLEXBOX HADIR
Sebelum hadirnya flexbox, satu-satunya cara untuk membuat layout halaman web adalah float dan positioning. Dengan menggunakan kedua properti CSS tersebut, kita sudah bisa membuat layout yang kita inginkan, baik di layar desktop maupun mobile. Namun, dalam beberapa kasus, penggunaan kedua properti CSS ini terbatas dan menyulitkan.

Beberapa contoh kasus yang mungkin menyulitkan dan tidak fleksibel untuk dicapai dari penggunaan float dan positioning :
    - Membuat konten berada di tengah secara vertikal dalam parent element-nya. Dari beberapa kasus, hal ini bisa dicapai menggunakan line-height. Namun, ini hanya berguna jika konten berada dalam satu baris serta kita harus mengetahui secara eksplisit tinggi dari parent element.

    - Membuat semua child element memenuhi ruang dari parent element-nya secara dinamis dan merata. Hal ini mungkin bisa tercapai menggunakan ukuran nilai persentase. Namun, jika jumlah child element berjumlah ganjil, kita harus memikirkan nilai persentase yang tepat. Bahkan, tetap akan meninggalkan celah ruang sedikit (tidak penuh).

    - Membentuk child element dalam layout multiple-column memiliki ukuran height yang sama, meskipun jumlah content di dalamnya tidak sama.

Dari beberapa kasus tersebut, akan sulit dijangkau oleh float dan positioning. Di sinilah flexbox hadir untuk menyelesaikan masalah seperti di atas.

