--->>>          PROMISE         <<<---
Dalam web development, asyncronous programming merupakan topik yang cukup menantang untuk dipelajari. apa pasalnya?sebabnya, kita terbiasa dengan kode yang bekerja secara synchronous.

fitur ini berfungsi seperti namanya, yaitu untuk membuat janji. mari kita analogikan kembali dalam dunia nyata. ketika kita memesan kopi kepada pelayan, maka secara tidak langsung pelayan tersebut berjanji kepada kita untuk membuatkan kopi kemudian menghidangkannya pada kita. namun janji bisa hanya tinggal janji. dalam dunia nyata pun, janji bisa juga tidak terpenuhi, entah itu karena kopi pesanan kita sedang kosong, atau mesin pembuat kopi itu sedang rusak

promise memiliki 3 kondisi
    1. Pending (janji sedang dalam proses)
    2. fullfilled (janji terpenuhi);
    3. rejected (janji gagal terpenuhi)

--->>>          SYNCHRONOUS VS ASYNCRONOUS          <<<---
Dalam synchronous program, jika kita menuliskan dua baris kode maka baris kode yang kedua tidak bisa dieksekusi sebelum mengeksekusi kode pada baris pertama. kita bisa bayangkan ini dalam kehidupan nyata ketika mengantri membeli kopi disebuah kedai kopi. kita tidak bisa mendapatkan kopi sebelum semua antria didepan kita selesai dilayani, sama halnya orang yang dibelakang kita pun harus menunggu gilirannya.

dalam asynchronous program, jika kita menuliskan dua baris kode, kita dapat membuat baris kode kedua dieksekusi tanpa harus menunggu kode pada baris pertama selesai dieksekusi. dalam dunia nyata kita bisa membayangkan dengan memesan kopi namun memesannya melalui pelayan, di mana sembari kita menunggu pesannya datang, kita dapat melakukan aktivitas lain seperti membuka laptop,menulis hingga kopi itu datang dengan sendirinya.

urutan dimana seseorang mendapatkan minumannya terlebih dahulu memiliki kolerasi dengan kapan ia memesan makanannya. namun bukan hanya itum faktor ini juga dipengaruhi dengan minuman apa yang ia pesan. contohnya jika kita memesan kopi espresso sedangkan teman kita hanya memesan air mineral, walaupun kita memesannya terlebih dahulu, tiada jaminan kita akan mendapatkan duluan. membuat espresso tentu akan membutuhkan waktu lebih lama dibandingkan dengan menuangkan air mineral pada gelas kan?

Dalam program yang dijalankan secara asynchronous pun demikian. Task yang kecil akan lebih dahulu selesai dibandingkan dengan task yang besar, meskipun task yang besar lebih dahulu dijalankan

--->>>      MEMBUAT OBJEK PROMISE          <<<---
Situs mdn mengatakan promise merupakan sebuah objek yang digunakan untuk membuat sebuah perhitungan(kode) ditangguhkan dan berjalan secara asynchronous. untuk membuat objek promise, kita gunakan keyword new diikuti dengan constructor dari promise : 
const coffee = new Promise();

didalam constructor promise kita perlu menetapkan resolver function atau bisa disebut executor function dimana fungsi tersebut akan dijalankan secara otomatis ketika constructor promise dipanggil

const executorFunction = (resolve,reject) => {
    const ifCoffee = true;

    if(isCoffee){
        resolve('kopi berhasil dibuat');
    }else{
        reject('Kopi tidak bisa dibuat');
    }
}

const makeCoffee = new Promise(executorFunction);
console.log(makeCoffee)

Executor function dapat memiliki dua parameter, yang berfungsi sebagai resolve dan reject function.
    - resolve() merupakan parameter pertama pada executor function. parameter ini merupakan fungsi yang dapat menerima satu parameter. biasanya kita gunakan untuk mengirimkan data ketika promise berhasil dilakukan. ketika fungsi ini terpanggil, kondisi promise akan berubah dari pending menjadi fullfilled

    - reject() merupakan parameter kedua pada executor function. parameter ini merupakan fungsi yang dapat menerima satu parameter yang digunakan untuk memberikan alasan mengapa promise tidak dapat terpenuhi. ketika fungsi ini terpanggil, kondisi promise akan berubah dari pending menjadi rejected.

executor function akan berjalan secara asynchronous hingga akhirnya kondisi promise berubah dari pending menjadi fullfilled/rejected

dari output yang dihasilkan baik ketika fullfilled ataupun rejected masih berupa promise, bukan nilai yang dibawa oleh fungsi resolve atau reject itu sendiri. lantas bagaimana cara untuk mengakses nilai yang dibawa oleh fungsi fungsi tersebut? caranya adalah dengan menggunakan method .then() yang tersedia pada objek promise

--->>>          FUNGSI ONFULFILLED DAN ON REJECTED          <<<---
Untuk menangani nilai yang dikirimkan oleh resolve() ketika promise onFullfilled, kita gunakan method .then() pada objek promise yang kita buat. lalu didalam method .then() kita berikan parameter berupa function yang berguna sebagai handle callback.contohnya seperti ini :

const executorFunction = (resolve,reject){
    const ifCoffeeMakerReady = true;
    if(isCoffeeMakerReady){
        resolve('Kopi berhasil dibuat');
    }else{
        reject('Mesin kopi tidak bisa digunakan');
    }
};

const handlerSuccess = resolv => {
    console.log(resol);
}

const makeCoffee = new Promise(executorFunction);
makeCoffee.then(handlerSuccess)

kode diatas : 
    - makeCoffee merupakan objek promise yang akan menghasilkan resolve() dengan membawa nilai 'Kopi berhasil dibuat'
    - lalu deklarasi fungsi HandlerSuccess() yang mencetak nilai dari parameternya.
    -kemudian kita memanggil method .then() dari makeCofee dan memberikan handlerSuccess sebagai parameternya.
    -ketika makeCoffee terpenuhi(fullfileed) maka handlerSuccess() akan terpanggil dengan parameter nilai yang dibawa oleh resolve. sehingga output akan menghasilkan kopi berhasil dibuat

namun bagaimana jika objek promise menghasilkan kondisi rejected ? bagaimana cara menangani nilai yang dikirimkan oleh reject()?

kita dapat menyimpan kedua handle callback baik onFulfilled atau onRejected pada parameter method .then(), yang perlu kita perhatikan adalah pastikan callback untuk onFullfilled disimpan pada parameter pertama seperti ini :

makeCoffee.then(handlerSuccess,handlerRejected);

dengan begitu kita tetap dapat menangani objek promise meskipun dalam kondisi rejected.

const executorFunction = (resolve, reject) => {
  const isCoffeeMakerReady = false;
  
  if (isCoffeeMakerReady) {
    resolve('Kopi berhasil dibuat');
  } else {
    reject('Mesin Kopi tidak bisa digunakan!');
  }
};
 
const handlerSuccess = coffee => {
  console.log(coffee);
};
 
const handlerRejected = rejectionReason => {
  console.log(rejectionReason)
};
 
const makeCoffee = new Promise(executorFunction);
makeCoffee.then(handlerSuccess, handlerRejected);
 
/* Output:
Mesin Kopi tidak bisa digunakan!
*/


