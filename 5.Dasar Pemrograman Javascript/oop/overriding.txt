--->>>          OVERRIDING          <<<---
Konsep lain yang lekat dengan pewarisan adalah overriding. overriding didalam OOOP merupakan fitur yang memperbolehkan subclass mendefinisikan implementasinya sendiri pada sebuah method yang sebenarnya sudah didefinisikan pada superclassnya. overriding diterapkan ketika kita ingin menetapkan implementasi yang spesifik di subclass pada sebuah method yang berasa dari superclass. overriding juga biasa diterapkan ketika kita ingin menambah properti baru secara spesifik pada sebuah subclass.

Dijavascript dan bahasa pemrograman yang menerapkan paradigma OOP lainnya, overriding umumnya dapatt dilakukan pada constructor dan method class.

--->>>          CONTRUCTOR OVERRIDING      <<<---
construktor merupakan method spesial pada class yang akan dipanggil pada saat pembuatan instance, lebih tepatnya ketika menggunakan keyword new diikuti dengan nama class.

const mailService = new MailService(); // akan memanggil method constructor pada class MailService

constructor akan mengembalikan objek yang merupakan instance dari class tersebut. perbedaan dengan method pada umumnya, pada construktuor kita tidak perlu menulis return ketika hendak mengembalikan nilai karena sudah dilakukan secara implisit.

didalam constructor, biasanya kita mendefinisikan properti dan menetapkan nilainya.contoh pada super class mailService kita mendefinisikan properti sender yang nilainya diambil dari argumen method constructor.

class MainService {
    contructor(sender){
        this.sender = sender;
    }
}

const mailService = new MailService('dari saya')
console.log(mailService);

ketika kita melakukan pewarisan, sering kali kita perlu menambahkan properti baru yang spesifik hanya pada subclass tertentu. contoh pada whatsappService yang merupakan subclass dari MailService kita membutuhkan properti yang mengindikasikan akun bisnis atau bukam, sehingga kita perlu membuat properti baru bernama isBusiness hanya pada subclass tersebut. agar bisa melakuka ini, kita perlu melakukan constructor overriding


class MailService{
    constructor(sender){
        this.penerima = sender;
    }
}


class whatsAppService extends MailService{
    // overriding constructor
    construktor(sender,isBusiness){
        super(sender);

        this.isBusiness = isBusiness;
    }
}

overriding constructor dilakukan sesimpel kita mendefinisikan kembali method constructor() pada sebuah subclass. selain itu method constructor didefinisikan dengan perubahan sesuai kebutuhan kita, misalnya menambahkan properti dan argumen isBusiness . satu hal yang penting dalam penerapan constructor overriding adalah jangan sampai lupa untuk memanggil method super()

memanggil method super() artinya memanggil constructor superclass, yaitu MailService. dengan begitu kita tidak perlu mendefinisikan dan menetapkan nilai properti umum satu persatu. meskipun dalam contoh kali ini properti yang bersifat umum hanya ada satu, yaitu sender, tetapi jika jumlah propertinya bertambah, kita tidak perlu menulis kode yang berulang pada setiap subclass

pada sintaks class, pemanggilan super() tidak boleh terlewatkan karena akan menyebabkan referenceError


--->>>          METHOD OVERRIDING       <<<---
konsep overriding juga bisa diterapkan pada method class. method overriding biasanya dilakukan ketika kita ingin mengubah implementasi method warisan superclass. contohnya pada class MailService terdapat method send() yang sudah didefinisikan implementasinya, namun jika pada subclass whatsappService kita membutuhkan implementasi yang berbeda, kita bisa override method send()

cara override method pada subclass mirip seperti override constructor tetapi kita tidak perlu memanggil method super didalamnnya

class MailService {
  constructor(sender) {
    this.sender = sender;
  }
 
  sendMessage(message, receiver) {
    console.log(`${this.sender} sent ${message} to ${receiver}`);
  }
}
 
class WhatsAppService extends MailService {
  constructor(sender, isBusiness) {
    super(sender);
    this.isBusiness = isBusiness;
  }
 
  // Overriding method
  sendMessage(message, receiver) {
    console.log(`${this.sender} sent ${message} to ${receiver} via WhatsApp`);
  }
}
 
 
const mailService = new MailService('someSender');
const whatsappService = new WhatsAppService('+6281234567890', true);
 
mailService.sendMessage('Hai, apa kabar?', 'someReceiver');
whatsappService.sendMessage('Hai, apa kabar?', '+6289876543210');
 
 
/**
* Output:
* someSender sent Hai, apa kabar? to someReceiver
* +6281234567890 sent Hai, apa kabar? to +6289876543210 via WhatsApp
*/

dan jika dibutuhkan, kita juga bisa memanggil method sendMessage() dari superclass melalui keyword super.sendMessage();

class MailService {
  constructor(sender) {
    this.sender = sender;
  }
 
  sendMessage(message, receiver) {
    console.log(`${this.sender} sent ${message} to ${receiver}`);
  }

}

class WhatsAppService extends MailService {
  constructor(sender, isBusiness) {
    super(sender);
    this.isBusiness = isBusiness;
  }
  
 
  // Overriding method
  sendMessage(message, receiver) {
    // memanggil method sendMessage pada superclass
    super.sendMessage(message, receiver);

    console.log('message sent via WhatsApp');
  }
}


const mailService = new MailService('someSender');
const whatsappService = new WhatsAppService('+6281234567890', true);

mailService.sendMessage('Hai, apa kabar?', 'someReceiver');
whatsappService.sendMessage('Hai, apa kabar?', '+6289876543210');

/**
* Output:
* someSender sent Hai, apa kabar? to someReceiver
* +6281234567890 sent Hai, apa kabar? to +6289876543210
* message sent via WhatsApp
*/