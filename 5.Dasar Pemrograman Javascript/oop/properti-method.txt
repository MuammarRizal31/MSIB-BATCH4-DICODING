PROPERTI DAN METHOD
kita sudah tahu bahwa class(function constructor dalam javascript) merupakan sebuah object blueprint yang dapat membuat sebuah objek serupa lebih mudah. dengan menggunakan class, kita bisa terhindar dari bnayka duplikasi kode dalam membuat banyak objek sekaligus.didalam sebuah class, kita dapat mendefinisikan dua hal, yaitu properti dan method

-->     PROPERTI
properti merupakan bagian dari class yang mendefinisikan nilai-nilai yang terkandung dalam sebuah instance class. conthonya,jika anda membuat class Car, properti adalah informasi yang sekiranya terdapat pada sebuah mobil seperti brand,color,maxSpeed dan chassisNumber contohlain jika anda membuat class Main, secara umum propertinya adalah sender,receiver subject, dan body

CONTOH : 

class Car {
    constructor(brand,color,maxSpeed){
        this.brand = brand;
        this.color = color;
        this.maxSpeed = maxSpeed;
        this.chasisNumber = `${brand}-${Math.floor(Math.random() * 1000) + 1}`;
    }
}

class Mail{
    constructor(sender,receiver,subject,body){
        this.sender = sender;
        this.receiver = receiver;
        this.subject = subject;
        this.body = body;
    }
}


nilai dari properti biasanya diambil dari argumen constructor agar nilainya dapat bervariasi setiap kali membuat instance

const mobil1 = new Car('avanza','white',500);
const mobil2 = new Car('BMW','black',700);
console.log(mobil1);
console.log(mobil2);

namun,adakalahnya nilai properti juga bisa didefinisikan didalam class itu sendiri. contohnya kita tidak ingin pengguna menentukan nomor rangka mobil secara mandiri, maka kita bisa memberikan nilai properti chassisNumber langsung didalam fungsi constructor


--->>>          PROPERTI GETTER DAN SETTER          <<<---
Secara standar, properti didalam sebuah instance class bersifat mutable atau dapat diubah nilainya. meskipun kita sudah menetapkan nilai chassisNumber oleh sistem, nyatanya nilai tersebut dapat diubah dengan mudah ketika objek mobil telah dibuat

class Car {
  constructor(brand, color, maxSpeed) {
    this.brand = brand;
    this.color = color;
    this.maxSpeed = maxSpeed;
    this.chassisNumber = `${brand}-${Math.floor(Math.random() * 1000)}`;
  }
}
 
const car = new Car('BMW', 'red', 200);
car.chassisNumber = 'BMW-1';
 
console.log(car);
 
/* Output:
Car { brand: 'BMW', color: 'red', maxSpeed: 200, chassisNumber: 'BMW-1' }
*/

lalu, bagaimana cara memproterksi agar nilai dari properti chassisNumber tidak dapat diubah? ketika kita berhadapan dengan kasus seperti ini, kita bisa memanfaatkan properti getter dan setter.

sebelum memecahkan masalah diatas, ketahuilah bahwa ada dua tipe properti,yaitu data property dan accessor property
    - daya property merupakan properti yang sejauh ini kita lihat, properti yang langsung menampung sebuah nilai didalam sebuah objek.

    - accessor properti merupakan properti yang dikontrol oleh sebuah getter dan setter. nilai yang didapatkan dari properti tersebut dikontrol oleh method get dan cara menetapkan nilai tersebut dikontrol oleh method set

contoh dari accessor property :
class User {
    constructor(firstName,lastName){
        this.firstName = firstName;
        this.lastName = lastName;
    }

    get fullName(){
        return `${this.firstName} ${this.lastName}`;
    }

    set fullName(){
        const [firstName,lastName] = fullname.split(' ');
        this.firstName = firstName;
        this.lastName = lastName;
    }
}

const user = new User('John', 'Doe');
console.log(user);
console.log(user.fullName);
 
user.fullName = 'Fulan Fulanah';
console.log(user);
console.log(user.fullName);
 
/* Output:
User { firstName: 'John', lastName: 'Doe' }
John Doe
User { firstName: 'Fulan', lastName: 'Fulanah' }
Fulan Fulanah
*/

didalam class user, anda bisa melihat bahwa terdapat data property firstName dan lastName. nilai dari properti tersebut ditetapkan via argumen constructor. selain itu, anda juga bisa melihat sebuah method get fullName dan set fullName. method tersebut merupakan accessor property yang mengukur cara akses dari properti fullName 

sebab kita menetapkan getter dan setter untuk properti fullName, maka kita bisa mengakses properti tersebut melalu instance user, ketika kita coba mendapatkan nilai properti fullname dengan cara user.fullname , method getter akan dijalankan dan nilai yang dikembalikan akan menjadi nilai dari properti tersbeut. begitu juga ketika kita coba menetapkan nilai properti fullName dengan cara user.fullName = "muammar rizal", kode didalam method setter dan dijalankan

CATATAN PENTING YANG PERLU DIKETAHUI MENGENAI GETTER DAN SETTER ADALAH : 
    - method getter harus mengembalikan nilai dan nilai tersebut akan menjadi nilai properti
    - method setter harus menerima satu argumen yang nilainya diambil dari operand keedua ketika melakukan assignment operator

Mari kita kembali kemasalah perubahan nilai properti chassisNumber. bagaimana getter dan setter dapat memproteksi perubahan properti chassisNumber ? dijavascript, pola yang sering diterapkan untuk memecahkan masalah ini adalah dengan memanfaatkan getter dan setter sebagai "wrapper" dari properti aslinya. tujuannya agar getter dan setter bisa mengontrol akses seperti mendapatkan dan menetapkan nilai properti

untuk menerapkan pola ini, pertama kita perlu mengubah nama dari properti chassisNumber, misalnya dengan menambahkan tanda garis bawah didepannya menjadi _chassisNumber

class Car {
  constructor(brand, color, maxSpeed) {
    this.brand = brand;
    this.color = color;
    this.maxSpeed = maxSpeed;
    this._chassisNumber = `${brand}-${Math.floor(Math.random() * 1000)}`;
  }
}

lalu kita tetapkan getter dan setter untuk properti chassisNumber. untuk getter,kita kembalikan dengan nilai properti _chassisNumber.

class Car {
  constructor(brand, color, maxSpeed) {
    this.brand = brand;
    this.color = color;
    this.maxSpeed = maxSpeed;
    this._chassisNumber = `${brand}-${Math.floor(Math.random() * 1000)}`;
 }
 
  get chassisNumber() {
    return this._chassisNumber;
  }

  set chassisNumber(chassisNumber) {
    console.log('you are not allowed to change the chassis number');
  }
}

CATATAN : 
Sebenarnya nilai chasisNumber masih bisa berubah jika kita mengubah langsung melalui properti _chassisNumber. namun,ketahuilah bahwa mengubah atau mendapatkan nilai properti objek yang diawali dengan tanda underscore tidak direkomendasikan, alasannya, komunitas javascript menyepakati bahwa hal properti yang diberi tanda underscore bukan untuk diakses,alias bersifat private

javasript versi ES2022 hadir dengan fitur private identifier,Dengan fitur tersebut, kita bisa membuat private property. Ini akan memecahkan masalah di atas. Private property akan kami bahas pada materi Member Visibility.

--->>>          METHOD      <<<---
Method adalah sebuah fungsi yang berada didalam sebuah class dan dapat diakses melalu instance class tersebut. method biasanya mengindikasikan hal yang dapat dilakukan oleh sebuah class. bila kita berbicara tentang class Car, method yang ada bisa drive(), reverse() dan turn(). jika pada class Main, method bisa berupa send() sendLater(), saveAsDraft()

class Car{
    constructor(brand,color,maxSpeed){
        this.brand = brand;
        this.color = color;
        this.maxSpeed = maxSpeed;
        this._chassIsNumber = `${brand}-${Math.floor(Math.random() * 1000)}`;
    }

    get chassIsNumber(){
        return this._chassIsNumber;
    }

    set chassisNumber(chassisNumber){
        console.log('you are not allowed to change the chassis number');
    }

    // method
    drive(){
        console.log(`${this.brand} ${this.color} is driving`)
    }

    reverse() {
        console.log(`${this.brand} ${this.color} is reversing`);
      }
    
    turn(direction) {
        console.log(`${this.brand} ${this.color} is turning ${direction}`);
      }
}


class Mail {
  constructor(sender, receiver, subject, body) {
    this.sender = sender;
    this.receiver = receiver;
    this.subject = subject;
    this.body = body;
  }
 
  // Methods
  send() {
    console.log(`Sending mail from ${this.sender} to ${this.receiver}`);
  }
 
  sendLater(delay) {
    console.log(`Sending after ${delay} ms`);
 
    setTimeout(() => {
      this.send();
    }, delay);
  }
 
  saveAsDraft() {
    console.log('Saving mail as draft');
  }
}


sama seperti fungsi javascript, method bisa menerima sebuah argumen. contohnya pada method turn() di class Car dan sendLater di class mail, kami memanfaatkan argumen direction dan delay untuk menetapkan arah dan waktu delay dalam menjalankan method nya

selain argumen, method juga dapat memiliki akses ke nilai properti atau method lainnya melalui keyword this.

method didalam class hanya bisa dijalankan melalui instance dari class tersebut

const car = new Car('BMW', 'red', 200);
 
car.drive();
car.turn('left');
car.reverse();
 
/* Output:
BMW red is driving
BMW red is turning left
BMW red is reversing
*/

method memang kental dengan 'kemampuan' yang bisa dilakukan oleh sebuah class, tetapi praktik nyatanya membuat method tidak hanya untuk itu. method juga biasa dibuat ketika kita perlu mengekstrasi sebuah kode agar lebih mudah untuk dibaca dan method tersebut hanya digunakan untuk kebutuhan internal saja

contoh, pada class Car, kita menetapkan nilai _chassisNumber dengan nilai random yang ditulis didalam constructor. hal itu membuat kode didalam contructor menjadi sulit dibaca karena dicampuri dengan logika dalam menghasilkan angka acak.

agar kode didalam contructor lebih rapih, kita bisa membaut method yang digunakan internal yang menampung kode random tersebut. biasanya method yang hanya digunakan secara internal disebut dengan private dan namanya diawali dengan tanda underscore.

class Car {
  constructor(brand, color, maxSpeed) {
    this.brand = brand;
    this.color = color;
    this.maxSpeed = maxSpeed;
    this._chassisNumber = this._generateChassisNumber();
  }
 
  get chassisNumber() {
    return this._chassisNumber;
  }
 
  set chassisNumber(chassisNumber) {
    console.log('you are not allowed to change the chassis number');
  }
 
  // Methods
  drive() {
    console.log(`${this.brand} ${this.color} is driving`);
  }
 
  reverse() {
    console.log(`${this.brand} ${this.color} is reversing`);
  }
 
  turn(direction) {
    console.log(`${this.brand} ${this.color} is turning ${direction}`);
  }
 
  _generateChassisNumber() {
    return `${this.brand}-${Math.floor(Math.random() * 1000)}`;
  }
}


--->>>          MEMBER VISIBILITY           <<<---
Member visibility bisa disebut juga sebagai hak akses pada sebuah properti dan method dan dalam method didalam class. secara default, seluruh properti dan method yang dibuat didalam class bersifat public, alias dapat diakses diluar dari kode class via instance. selain public, kita juga bisa membuat properti dan method bersifat private, terutama ketika kita ingin properti atau method tersebut hanya digunakan dalam cakupan kode didalam class saja (penggunaan interval)

dipembahasan sebelumnnya ktia sudah mengenal bahwa pemberian tanda underscore pada properti atau method bisa dijadikan sebagai penanda bahwa ia diaanggap private. masalahnya adalah cara tersebut tidak benar benar memproteksi hak asesnya. contoh, pada class Carm kita sudah membuat properti _chassisNumber dan method _generateChassisNumber() dengan tanda underscore. namun, kedua member tersebut tetap saja masih bisa diakses via instance, bahkan kita bisa mengubah nilainya.

class Car {
  constructor(brand, color, maxSpeed) {
    this.brand = brand;
    this.color = color;
    this.maxSpeed = maxSpeed;
    this._chassisNumber = this._generateChassisNumber();
  }
 
  get chassisNumber() {
    return this._chassisNumber;
  }
 
  set chassisNumber(chassisNumber) {
    console.log('you are not allowed to change the chassis number');
  }
 
  // Methods
  drive() {
    console.log(`${this.brand} ${this.color} is driving`);
  }
 
  reverse() {
    console.log(`${this.brand} ${this.color} is reversing`);
  }
 
  turn(direction) {
    console.log(`${this.brand} ${this.color} is turning ${direction}`);
  }
 
  _generateChassisNumber() {
    return `${this.brand}-${Math.floor(Math.random() * 1000)}`;
  }
}
 
const car = new Car('BMW', 'red', 200);
 
console.log(car._chassisNumber);
car._chassisNumber = 'BMW-1';
console.log(car._chassisNumber);
console.log(car._generateChassisNumber());
 
/* Output:
BMW-85
BMW-1
BMW-667
*/

untuk menyelesaikan masalah ini, javascript versi ES2022 secara resmi mengenalkan cara dalam menetapkan hak akses private pada properti dan method objek, takni dengan menambahkan tanda # diawal penamaan properti atau method

class Car {
  #chassisNumber = null;
 
  constructor(brand, color, maxSpeed) {
    this.brand = brand;
    this.color = color;
    this.maxSpeed = maxSpeed;
    this.#chassisNumber = this.#generateChassisNumber();
 }
 
  get chassisNumber() {
    return this.#chassisNumber;
  }
 
  set chassisNumber(chassisNumber) {
    console.log('you are not allowed to change the chassis number');
  }
 
  // Methods
  drive() {
    console.log(`${this.brand} ${this.color} is driving`);
  }
 
  reverse() {
    console.log(`${this.brand} ${this.color} is reversing`);
  }
 
  turn(direction) {
    console.log(`${this.brand} ${this.color} is turning ${direction}`);
  }
 
  #generateChassisNumber() {
    return `${this.brand}-${Math.floor(Math.random() * 1000)}`;
  }
}

khusus untuk properti yang sifatnya private, anda harus mendeklarasikan propertinya di enclosing class seperti ini.

ass Car {
  #chassisNumber = null; // enclosing class
 
  constructor(brand, color, maxSpeed) {
    this.brand = brand;
    this.color = color;
    this.maxSpeed = maxSpeed;
    this.#chassisNumber = this.#generateChassisNumber();
  }
 
 // ... kode lainnya.
}

dengan begitu, properti dan method yang sifatnya private tidak bisa diakses diluar dari cakupan kode class