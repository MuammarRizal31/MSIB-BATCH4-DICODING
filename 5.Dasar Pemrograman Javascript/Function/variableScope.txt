VARIBABLE SCOPE
Sejauh ini kita  sudah mengenal function. setelah kita memisahkan kode ke dalam blok atau fungsi terpisah, ada satu hal penting yang perlu kita tahu, yaitu variable scoping. ada banyak keadaan di mana kita membutuhkan variable untuk diakses diseluruh script yang kita buat. tetapi ada juga keadaan dimana kita ingin varibale tersebut hanya dapat diakses pada cakupan fungsi dan fungsi turunan nya saja.

    - variable yang dapat diakses dari seluruh script disebut dengan 'globally scoped'.
    - sementara variable yang hanya diakses hanya pada fungsi tertentu disebut dengan 'locally scoped'.

variable javascript menggunakan fungsi untuk mengelola cakupannya. jika variable didefinisikan diluar fungsi, maka variable tersebut bersifat global. jika varibale didefinisikan didalam fungsi, maka variable bersifat lokal dan cakupannya hanya pada fungsi tersebut beserta turunanannya.

variable javascript menggunakan fungsi untuk mengelola cakupannya. jika variable didefinisikan diluar fungsi, maka variable tersebut bersifat global. jika variable didefinisikan didalam fungsi, maka variable bersifat lokal dan cakupannya hanya pada fungsi tersebut beserta turunan nya.

// global variable, dapat diakses pada parent() dan child()
const a = 'a'; 
 
function parent() {
    // local variable, dapat diakses pada parent() dan child(), tetapi tidak dapat diakses di luar dari fungsi tersebut.
    const b = 'b'; 
    
    function child() {
        // local variable, dapat diakses hanya pada fungsi child().
        const c = 'c';
    }
}


kita harus berhati hati dalam mendefinisikan variable didalam fungsi. pasalnya, kita bisa mendapatkan hasil yang tidak diperkirakan, contohnya seperti berikut : 

function multiply(num) {
    total = num * num;
    return total;
}

let total = 9;
let number  = multiply(20);

console.log(total)

/* output
400
*/

mungkin kita berharap nilai total akan tetap 9, mengingat variable total pada fungsi multiply seharusnya tidak akan berpengaruh untuk kode diluar fungsi tersebut. hal ini bisa terjadi karena pada fungsi multiply() kita tidak menetapkan variable total sebagai cakupan lokal. kita tidak menggunakan keyword const atau let ketika mendeklarasikan variable total pada fungsi multiply() sehingga varibale total menjadi global.

noted : perlu kita perhatikan, jika kita lupa menuliskan keyword let,const atau var pada script ketika membuat sebuah variable, maka variable tersebut akan menjadi global

sebisa mungkin kita harus menghindari pembuatan variable global, karena variable global dapat diakses pada seluruh script yang kita tuliskan. semakin banyak variable global yang kita tuliskan semakin tinggi kemungkinan tabrakan(collision) terjadi
