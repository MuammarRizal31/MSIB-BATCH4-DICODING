--->>>          THROWING ERRORS         <<<---
Sekarang kita lihat implementasi try-catch pada kasus yang lebih Umum
let json = '{'name: rizal','age': 20}';

try{
    let user = JSON.parse(json);

    console.log(user.name);
    console.log(user.age);
}catch(e){
    console.log(e.name);
    console.log(e.messege)
}

pada kode diatas, fungsi JSON.parse akan melakukan parsing atau konversi dari variable json(string) menjadi sebuah object. skenario seperti diatas akan banyak kita temui ketika melakukan request ke API.

seharusnya aplikasi berjalan lancar tanpa menimbulkan eror.

Lalu, bagaimana jika json string tidak sesuai dengan format object Javscript ?

let json = '{ bad json }';
 
try {
    let user = JSON.parse(json);
 
    console.log(user.name);
    console.log(user.age);
} catch (error) {
    console.log(error.name);
    console.log(error.message);
}
 
 
/* output
SyntaxError
Unexpected token b in JSON at position 2
*/

apabila json tidak sesuai format, maka JSON.parse akan menimbulkan eror. error tersebut akan ditangkap oleh block catch dan kode yang didalamnya akan dieksekusi.

lalu, bagaimana jika json yang didapat adalah seperti ini ?
let json = '{
    "age" : 20,
}';

try{
    let user = JSON.parse(json);

    console.log(user.name) //undefined
    console.log(user.age) //20
}catch (error){
    console.log(error.name);
    console.log(error.messege);
}

secara sintakses, kode diatas tidak menimbulkan eror, sehingga block catch akan diabaikan. namun, tidak adanya properti name pada json sebernernya sama saja dengan eror karena akan berdampak pada jalannya program kita.

untuk mengatasinya, kita bisa menggunakan throw. operator ini akan 'melemparkan' eror pada program, sehingga kode akan masuk pada blok catch. berikut adalah contoh mengimplementasikan throw untuk menimbulkan eror kita sendiri

let json = '{ "age": 20 }';
 
try {
    let user = JSON.parse(json);
 
    if (!user.name) {
        throw new SyntaxError("'name' is required.");
    }
 
    console.log(user.name); // undefined
    console.log(user.age);  // 20
} catch (error) {
    console.log(`JSON Error: ${error.message}`);
}
 
ketika properti user.name tidak memiliki nilai, maka program akan menghasilkan SyntaxError. didalamnnya kita bisa menentukan pesan yang dapat membantu menjelaskan apa eror yang terjadi

sekarang kita telah mengetahui ada banyak kemungkinan eror yang bisa muncul dalam sebuah program. tentunya akan sangat membantu jika kita bisa memberikan pesan yang sesuai kepada pengguna atau kepada diri kita sendiri untuk menemukan kesalahan dengan lebih muhdah.

sekarang anggaplah json sudah sesuai, tetapi ternyata ada eror lain yang terjadi, misalnya karena variable yang belum terdefinisikan.

let json = '{ "name": "Yoda", "age": 20 }';
 
try {
    let user = JSON.parse(json);
 
    if (!user.name) {
        throw new SyntaxError("'name' is required.");
    }
 
    errorCode;
 
    console.log(user.name); // Yoda
    console.log(user.age);  // 20
} catch (error) {
    console.log(`JSON Error: ${error.message}`);
}
 
/* output
JSON Error: errorCode is not defined
*/


Eror berhasil ditangani, tetapi konsol tetap menampilkan pesan “JSON Error”, lantas bagaimana kita bisa menampilkan pesan eror sesuai eror yang muncul?

Jawabannya adalah dengan if statement.

try {
    // ...
} catch (error) {
    if (error instanceof SyntaxError) {
        console.log(`JSON Error: ${error.message}`);
    } else if (error instanceof ReferenceError) {
        console.log(error.message);
    } else {
        console.log(error.stack);
    }
}

Dengan operator instanceOf, kita bisa mendapatkan tipe dari eror yang terjadi. Dari sana kita bisa membuat percabangan bagaimana cara menangani erornya.



