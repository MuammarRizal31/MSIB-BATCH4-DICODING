-   Pada materi Git kita mempelajari sejarah berdirinya platform Git, bagaimana Linus Torvalds bersama tim membangun platform tersebut pada tahun 2005. Git dibangun dengan tujuan agar dapat melakukan kolaborasi antar tim serta bagaimana proyek dapat dikontrol dengan baik. Untuk bisa berkolaborasi, bisa dengan membangun proyek menjadi open source atau pilihan lainnya menyetel kolaborasi dengan orang lain.

git repository  -> media penyimpanan file projek didalam git server
git branch      -> percabangan untuk versi baru dari projek repository
git fork        -> penyalinan dari repository orang lalu menyimpannya didalam repository git sendiri/kita
git clone       -> mengambil sebuah repository dan menyimpan nya pada directory lokal
git commit      -> cuplikan perubahan dari repository pada waktu tertentu
git push        -> mengirim hasil dari perubahan file yang dilakukan ke dalam repository server
git checkout    -> perintah untuk kembali pada commit sebelumnya
git reset       -> untuk mengatur ulang,perintah ini merupakan perintah untuk mengembalikan suatu kondisi berkas ke commit yang dituju dan menghapus riwayat sesudahnya.
git revert      -> Perintah ini akan mengembalikan kondisi suatu berkas ke waktu/commit yang dituju tanpa menghapus catatan riwayat commit.



- Terdapat menu utama pada saat mengakses halaman GitHub yaitu, Explore Repository, Sign up, dan Sign in. Selain itu, ada juga fitur-fitur pendukung pada GitHub seperti:
    > New Repository, digunakan membuat repository baru dengan jenis public & private.
    > Import Repository, digunakan untuk mengambil/menyalin file proyek dari vendor lain seperti Subversion atau Mercurial ke dalam repository baru pada GitHub. Proses impor dilakukan dengan menggunakan link URL.
    > Gist, digunakan untuk berbagi potongan kode, catatan, melakukan daftar, dan lainnya. Seperti halnya repositori, Anda dapat menyetel dan menyimpan Intisari Anda sebagai rahasia atau publik.
    > GitHub Organization, digunakan untuk berkolaborasi bersama pada suatu organisasi misalnya untuk bisnis dengan sejumlah kelebihan misalnya banyak proyek sekaligus. Pemilik dan administrator dapat mengelola hak akses anggota ke suatu data atau proyek dengan fitur keamanan dan administratif yang canggih.
    > GitHub Project, digunakan untuk mengatur dan memprioritaskan pekerjaan. Anda dapat membuat papan proyek (project board) untuk mengerjakan fitur tertentu, peta alur yang komprehensif (comprehensive roadmaps), atau bahkan merilis daftar periksa (release checklists). Dengan papan proyek, Anda memiliki fleksibilitas untuk membuat alur kerja khusus yang sesuai dengan kebutuhan Anda.

- Melihat bagian toolbar pada halaman GitHub dashboard. Dalam toolbar terdapat beberapa menu seperti:
    > Pull request untuk melihat semua aktivitas mengenai pekerjaan yang telah selesai dan tersimpan di dalam GitHub
    > Issues untuk melihat semua tanggapan atau komentar mengenai permasalahan yang kita dapat saat menggunakan repository milik orang lain
    > Marketplace untuk mencari dan memasang fitur tools pendukung yang disediakan oleh GitHub. Tools dalam marketplace akan membantu Anda dalam mengoptimalkan penggunaan GitHub di dalam proyek
    > Explore untuk melihat berbagai informasi atau berita terkini mengenai repository, topik, dan trending di GitHub
    > Settings untuk melakukan perubahan profil seperti username, foto, serta informasi lainnya

- Setiap proyek repository memiliki kolaborator dan kontributor. Seorang kolaborator merupakan anggota tim yang memiliki akses dalam sebuah repositori proyek (project repository). Akses ini tentunya bermacam-macam ya, ada yang dibatasi pada pekerjaan-pekerjaan tertentu, ada pula yang dapat melakukan semua pekerjaan dalam sebuah repository

- Terdapat beberapa kolom yang bisa Anda isi pada halaman pembuatan repository GitHub
    * Owner : Digunakan untuk menentukan siapa pemilik repository yang akan dibuat.
    * Repository name : Digunakan untuk menentukan nama dari repository yang akan dibuat.
    * Description : Digunakan untuk memberikan penjelasan mengenai repository yang dibuat.
    * Public / Private : Digunakan untuk menentukan apakah repository bersifat private atau public. Jika ditetapkan sebagai
    public, orang lain dapat mengaksesnya. Sedangkan jika private, orang lain yang tidak memiliki akses tidak akan bisa mengakses repository tersebut.
    * Initialize this repository : Digunakan untuk menambahkan beberapa item yang ada sewaktu repository dibuat, seperti berkas readme, berkas .gitignore, dan lisensi

- Repository dalam GitHub mampu menyimpan berbagai jenis berkas, tetapi tak semua dapat ditampilkan dalam mode preview. Contoh berkas yang sering digunakan adalah berkas README.md karena dapat diinisialisasi sewaktu pembuatan repository.

- Git Commit dapat digunakan untuk menyimpan perubahan yang dilakukan, seperti penambahan berkas atau perubahan pada isi berkas. Contohnya ketika Anda menambahkan progress belajar dalam studi kasus.

- Untuk melakukan Commit di GitHub, cukup dengan melakukan beberapa hal berikut:
    * Melakukan perubahan.
    * Menuliskan pesan perubahan / commit message.
    * Menuliskan deskripsi perubahan / commit description.
    * Memilih lokasi commit, apakah langsung melanjutkan dalam cabang / branch saat ini (main) atau menggunakan cabang / branch baru.
    * Menekan tombol “Commit Change” untuk mengeksekusi commit.

- Berkas readme dalam studi kasus menggunakan bahasa Markdown. Markdown merupakan bahasa markah (markup language) ringan yang dapat digunakan untuk menambahkan format pada dokumen teks biasa [1]. Saat ini Markdown menjadi salah satu bahasa markup yang cukup populer.

- Sedangkan bahasa markah (markup language) merupakan sistem modern untuk memberikan keterangan pada dokumen dengan sintaksis yang dapat dibedakan dari kontennya. Biasanya ia menggunakan tag atau tanda tertentu untuk mendefinisikan elemen dalam dokumen, dikenal dari istilah "marking up" (memberikan penanda).

- Berikut adalah beberapa format Markdown yang digunakan dalam studi kasus:
    * Heading
        > Dalam bahasa markdown, tanda pagar digunakan untuk membangun sebuah heading. Semakin banyak jumlah tanda pagar (#), maka semakin besar level heading-nya. Ketika semakin besar level heading-nya, maka teks akan menjadi lebih kecil.

    * line breaks
        > Anda bisa membuat baris baru dalam bahasa markdown menggunakan dua spasi. Selain itu, Anda juga bisa menggunakan tanda tag <br> alias break, tanda &nbsp;, dan tanda garis miring (\).

    * unordered list
        > Tanda bintang dalam bahasa markdown akan berubah menjadi daftar atau list yang tidak berurutan. Selain tanda bintang, tanda hubung (-) dan tanda tambah (+) juga akan diartikan sebagai daftar yang tidak berurutan atau unordered list.

    * bold
        > Anda juga dapat memberikan penebalan pada teks. Anda cukup mengutip teks tersebut menggunakan dua tanda bintang (**) di awal dan di akhir. Dengan begitu, teks tersebut akan menjadi lebih tebal atau biasa disebut dengan bold.

    * italic
        > Untuk memberikan italic atau membuat miring teks dalam berkas makrdown, Anda dapat mengutip teks tersebut dengan tanda bintang (*). Seperti halnya bold, bedanya cukup satu bintang saja.

- Anda dapat melihat history perubahan (commit history) dengan mudah di GitHub. Caranya cukup ke halaman repository, kemudian menentukan branch mana yang akan dipilih, dan pilih bagian icon jam dengan teks History.

- Pada halaman detail commit, Anda juga dapat melihat berbagai perubahan yang telah dilakukan baik penambahan, pengubahan, atau pengurangan

- Dengan bantuan release dari GitHub, kita dapat memublikasikan sesuatu sehingga orang lain dapat menemukannya dengan mudah. Caranya pergi ke halaman repository, kemudian fokus pada bagian kanan di sub Release. Lalu, silakan klik create a new release untuk memublikasikan project repository Anda.